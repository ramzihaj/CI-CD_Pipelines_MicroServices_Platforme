{{- if .Values.postgresql.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.postgresql.name }}-pvc
  namespace: {{ .Values.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgresql.persistence.size }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.postgresql.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.postgresql.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.postgresql.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.postgresql.name }}
    spec:
      containers:
      - name: {{ .Values.postgresql.name }}
        image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
        ports:
        - containerPort: {{ .Values.postgresql.service.port }}
          name: postgres
        env:
        - name: POSTGRES_DB
          value: {{ .Values.postgresql.auth.database }}
        - name: POSTGRES_USER
          value: {{ .Values.postgresql.auth.username }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.postgresql.auth.password }}
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        resources:
          {{- toYaml .Values.postgresql.resources | nindent 10 }}
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - {{ .Values.postgresql.auth.username }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - {{ .Values.postgresql.auth.username }}
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: {{ .Values.postgresql.name }}-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.postgresql.name }}-service
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.postgresql.name }}
spec:
  type: ClusterIP
  ports:
  - port: {{ .Values.postgresql.service.port }}
    targetPort: {{ .Values.postgresql.service.port }}
    protocol: TCP
  selector:
    app: {{ .Values.postgresql.name }}
{{- end }}
{{- if .Values.redis.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.redis.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.redis.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.redis.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.redis.name }}
    spec:
      containers:
      - name: {{ .Values.redis.name }}
        image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
        ports:
        - containerPort: {{ .Values.redis.service.port }}
          name: redis
        resources:
          {{- toYaml .Values.redis.resources | nindent 10 }}
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.redis.name }}-service
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.redis.name }}
spec:
  type: ClusterIP
  ports:
  - port: {{ .Values.redis.service.port }}
    targetPort: {{ .Values.redis.service.port }}
    protocol: TCP
  selector:
    app: {{ .Values.redis.name }}
{{- end }}
